#include <vcl.h>
#pragma hdrstop
#include <DateUtils.hpp>
#include <process.h>
#include <stdio.h>

#include "uUart.h"
#include "uIDCardDef.h"      
#include "uCaptions.h"
#include "uParams.h"

#include "uMaintain.h"
extern TfrmMaintain *frmMaintain;

#pragma package(smart_init)
#pragma link "XComDrv"
#pragma resource "*.dfm"

TfrmUart *frmUart;


BYTE ucSend[24];                       // 命令缓冲区

bool m_bQuit;                          // 是否退出系统
bool m_bConnected;                     // 是否已经连接串口

int     m_iReadModal;                  // 1读块 2读扇区
bool    m_bReadIC = false;             // 是否在读IC
int     m_iDataCount;

AnsiString m_sBarCode;                 // 读取到的试剂卡条码
WORD       dwTCount;                   // 读取的数据个数
DWORD      dwTRead[8192];              // 读数的数据内容
DWORD       dwBCCount;                  // 读取的条码测试数据个数
DWORD      dwBCRead[4096];             // 读数的条码测试数据内容

HANDLE DataHandle = NULL;              // 数据处理线程句柄
bool m_bAccept    = false;             // 接收到数据
bool m_bProcess   = false;             // 线程正在处理接收到的数据


bool m_bBCScan    = false;             // 读取条码测试
bool m_bScan      = false;             // 单独扫描
bool m_bReadID    = false;             // 读ID卡

int    dBufCount = 0;                  // 接收缓冲区数据字节数

BYTE   RecvBuf[40960];                 // 串口接收缓冲区
BYTE   BCMsg[40960];                   // 条码测试缓冲区

int    bHasCard;                       // 是否有卡
bool   bHasID;                         // 是否有ID卡
WORD   dwIDByte;                       // 写入/读取ID卡的字节数
BYTE   IDBuf[4096];

int    iScan[30];                      // 扫描头参数
bool   isXscan;
/*
.0  = 测量头电机频率
.1  = X原点-条码
.2  = 条码长度
.3  = 条码1 list
.4  = 条码距离
.5  = 条码放大倍数
.6  = X原点-测试
.7  = 测试窗口长度
.8  = 条形连续
.9  = 测试放大倍数
.10 = 测量头电机频率 ???
.11 = 试剂卡颜色
.12 = 电机锁步
.13 = 电机加速步数
.14 = 电机加速频率
.15 = 低速频率
.16 = 低速次数

.20 = 光路步长
.21 = x轴匀速频率
.22 = x轴扫码窗口长度
.23 = y轴扫码位置

.24 = 温控最小
.25 = 温控最大
.26 = 温度值
.27 = 丢卡步数
.28 = Y轴条码位置
*/

void InitCmd_add(BYTE b3, BYTE b4, BYTE b7, BYTE b8, BYTE b9)
{
   for(int i=0;i<24;i++)
   {
	   ucSend[i] = 0x00;
   }
   ucSend[0] = 0x01;
   ucSend[2] = b3;
   ucSend[3] = b4;
   ucSend[7] = b8;
   ucSend[8] = b9;
   ucSend[9] = b7;

   if(b4 == 0x12 || b4 == 0x11 || b4 == 0x18)
   {
      ucSend[7] = b7;
      ucSend[8] = b8;
      ucSend[9] = b9;
   }

   BYTE ucCRC = 0;
   for(int i=0; i<23;i++)
   {
	   ucCRC += ucSend[i];
   }
   ucSend[23] = ucCRC;
	
}





//------------------------------------------------------------------------------
// 查询串口是否存在 并设置串口属性
//------------------------------------------------------------------------------
bool __fastcall ComPortExists(AnsiString asName)
{
   HANDLE hPort;
   bool   b = false;
   DWORD dwError;
   //win下针对COM10以上端口,串口名要做特殊处理
   //更改为："\\.\COM10"

   int comNum = asName.SubString(4,2).ToInt();
   if(comNum > 10)
   {
     AnsiString temp = asName;
     asName = "\\.\" + temp;
   }
   hPort = CreateFile(asName.c_str(),
                        GENERIC_READ | GENERIC_WRITE,
                        0,
                        0,
                        OPEN_EXISTING,
                        0,
                        0);
   if (hPort!=INVALID_HANDLE_VALUE)           // 串口可被打开
   {
      CloseHandle(hPort);                     // 关闭串口
      b = true;
   }

   return b;
}

__fastcall TfrmUart::TfrmUart(TComponent* Owner) : TForm(Owner)
{
  isXscan = false;
}

void __fastcall TfrmUart::DisplayData(int istyle,char buf[],int icount)
{
   AnsiString s="";
   BYTE b;
   if(icount==0) return;
   if(istyle==0) s = "发送:";
   else s = "接收:";
   for(int i=0; i<icount; i++)
   {
      b = buf[i];
      s = s + IntToHex(b,2) + " ";
   }
   if(m==NULL) return;
   m->Lines->Append(s);
   s.printf("数据个数 %d", icount);
   m->Lines->Append(s);
   // if(m->Lines->Count > 500) m->Lines->Clear();
}

// 修改后的测量数据处理函数
// 0 ok
// 1 faild
// 2 less
int __fastcall TestMsgProcess(BYTE *buf, int count)
{
    int pos = 0;

    while (pos < count && !(buf[pos] == 0xff && buf[pos+1] == 0x1a)) pos++;

    if (pos >= count) return 1;

    int tmpCount = 0;

    for (;pos + 4 <= count; pos += 6)
    {
        if (0xffffffff == *(unsigned int*)(buf+pos))
        {
             dwTCount = tmpCount;
             return 0;
        }
        if (buf[pos] == 0xff && buf[pos+1] == 0x1a)
        {
             DWORD val = 0;
             val += (buf[pos+2] >>  4) * 10000000;
             val += (buf[pos+2] & 0xf) * 1000000;
             val += (buf[pos+3] >>  4) * 100000;
             val += (buf[pos+3] & 0xf) * 10000;
             val += (buf[pos+4] >>  4) * 1000;
             val += (buf[pos+4] & 0xf) * 100;
             val += (buf[pos+5] >>  4) * 10;
             val += (buf[pos+5] & 0xf) * 1;

             dwTRead[tmpCount++] = val;
        }
        else
        {
            return 1;
        }

    }
    return 2;
/*
   int i;
   BYTE b0,b1,b2,b3;

   unsigned short sum = 0xff*4;
   unsigned int tmpCount = 0;


   // 查找0XFF
   if (buf[0] != 0xff)
   {
       return 1;
   }
   if (count < 4)
   {
       return 2;
   }

   for(i=0; i<count && i < count + 6; i += 4)
   {
      b0 = buf[i];
      b1 = buf[i+1];
      b2 = buf[i+2];
      b3 = buf[i+3];
      if (b0 != 0xff)
      {
          return 1;
      }

      if (b1 == 0xff && b2 == 0xff && b3 == 0xff)
      {
           if (sum == buf[i+4]*256+buf[i+5])
           {
               dwTCount = tmpCount;
               return 0;
           }
           else
           {
               return 1;
           }
      }

      sum += b0;
      sum += b1;
      sum += b2;
      sum += b3;
      dwTRead[tmpCount++] = b1*256*256 + b2*256 + b3;
   }
   return 2;
   */


}

// 条码测试数据处理函数
int __fastcall BCMsgProcess(BYTE *buf, int count)
{
       int pos = 0;

    while (pos < count && !(buf[pos] == 0xff && buf[pos+1] == 0x1a)) pos++;

    if (pos >= count) return 1;

    int tmpCount = 0;

    for (;pos + 4 <= count; pos += 5)
    {
        if (0xffffffff == *(unsigned int*)(buf+pos))
        {
             dwBCCount = tmpCount;
             return 0;
        }
        if (buf[pos] == 0xff && buf[pos+1] == 0x1a)
        {
             DWORD val = 0;
             val += (buf[pos+2] >>  4) * 100000;
             val += (buf[pos+2] & 0xf) * 10000;
             val += (buf[pos+3] >>  4) * 1000;
             val += (buf[pos+3] & 0xf) * 100;
             val += (buf[pos+4] >>  4) * 10;
             val += (buf[pos+4] & 0xf) * 1;

             dwBCRead[tmpCount++] = val;
        }
        else
        {
            return 1;
        }

    }
    return 2;


  /*/

   int i;
   BYTE b0,b1,b2,b3;

   unsigned short sum = 0xff*4;
   unsigned int tmpCount = 0;


   // 查找0XFF
   if (buf[0] != 0xff)
   {
       return 1;
   }
   if (count < 4)
   {
       return 2;
   }

   for(i=0; i<count && i < count + 6; i += 4)
   {
      b0 = buf[i];
      b1 = buf[i+1];
      b2 = buf[i+2];
      b3 = buf[i+3];
      if (b0 != 0xff)
      {
          return 1;
      }

      if (b1 == 0xff && b2 == 0xff && b3 == 0xff)
      {
           if (sum == buf[i+4]*256+buf[i+5])
           {
               dwBCCount = tmpCount;
               return 0;
           }
           else
           {
               return 1;
           }
      }

      sum += b0;
      sum += b1;
      sum += b2;
      sum += b3;
      dwBCRead[tmpCount++] = b1*256*256 + b2*256 + b3;
   }
   return 2;
   */

}

// ID数据处理函数
void __fastcall IDMsgProcess(BYTE *buf, int count)
{
   dwIDByte = count;
   memcpy(IDBuf,buf,count-4);
}

BYTE __fastcall CalcCRC(BYTE *buf)
{
   BYTE ucCRC = 0;
   for(int i=0; i<23; i++) ucCRC+=buf[i];
   return ucCRC;
}

void __fastcall TfrmUart::ReceiveData()
{
   BYTE buf[2048];
   int  count;
   int  Esc = 1;
   while(XComm1->Opened)
   {


      try
      {
          count = XComm1->ReadData(buf, sizeof (buf));
      }
      catch ( ... )
      {
           break;
      }

      if (count <= 0)
      {
          if (--Esc)
          {
                continue;
          }
          break;
      }
      Esc = 2;

      DisplayData(1,buf,count);

      memcpy(&RecvBuf[dBufCount], buf, count);
      dBufCount += count;
      ::Sleep(5);
   }
}

bool CalcCRC(BYTE uc[],int iPos,int iCount)
{
   bool bRet;
   BYTE *buf;
   buf = new BYTE[iCount];
   memcpy(buf,&uc[iPos],iCount);
   BYTE bCRC = 0x00;
   for(int i=0; i<iCount-1; i++)
   {
      bCRC = bCRC^buf[i];
   }
   bCRC = ~bCRC;
   if(bCRC == buf[iCount-1]) bRet = true;
   else bRet = false;
   return bRet;
}

// 数据处理线程
void DataThread(void *param)
{

   BYTE TestMsg[40960];
   BYTE buf[40960];
   BYTE b2,b4,b5,b8,b9,b10,b23,bb;
   BYTE BI;
   WORD Wv;
   BYTE bCRC;
   bool bHead, bEnd;
   int  iHead, iEnd, iCount;
   AnsiString sTemp;
   int iTemperature,iLen,iPak;
   double dTemp;
   int iDCount;
   while(1)
   {
      ::Sleep(5);
      if(m_bQuit) break;                         // 退出系统
      if(!m_bConnected) continue;                // 串口未连接
      frmUart->ReceiveData();                    // 串口接收数据
      if(m_bReadIC)                              // 读写IC卡
      {
         bHead = bEnd = false;                      // 找包头包尾
         for(int i=0; i<dBufCount; i++)
         {
            if( (!bHead) && (0x20==RecvBuf[i]) )    // 还没找到包头,是包头标志
            {
               iHead = i;                           // 包头位置
               bHead = true;                        // 找到包头
               continue;
            }
            if(bHead && (0x03==RecvBuf[i]) )        // 只有找到包头才找包尾
            {
               if(CalcCRC(RecvBuf,iHead+1,i-iHead-1))
               {
                  iEnd = i;                         // 包尾位置
                  bEnd = true;                      // 找到包尾
                  break;
               }
            }
         }
         if(!bHead||!bEnd) continue;
         iCount = iEnd - iHead + 1;                 // 包的长度
         if(m_bReadIC)                              // 是在读IC
         {
            switch(m_iReadModal)
            {
            case 1:                                 // 读块
                   memcpy(&IDBuf[m_iDataCount],&RecvBuf[iHead+4],16);
                   m_iDataCount = m_iDataCount + 16;
                   break;
            case 2:                                 // 读扇区
                   memcpy(&IDBuf[m_iDataCount],&RecvBuf[iHead+4],48);
                   m_iDataCount = m_iDataCount + 48;
                   break;
            }
            if(m_iDataCount==3440) m_bReadIC=false; // 读结束
         }
         dBufCount = dBufCount - iCount;
         if(dBufCount>0)
         {
            memcpy(buf,&RecvBuf[iEnd+1],dBufCount);
            memcpy(RecvBuf,buf,dBufCount);
         }
         m_bProcess = false;
         continue;
      }
      if(dBufCount<24) continue;                 // 少于24个不处理
      m_bProcess = true;                         // 正在处理数据

      memset(TestMsg,0,sizeof(TestMsg));

      if(m_bBCScan)                              // 条码调试
      {
         memcpy(BCMsg,RecvBuf,dBufCount);
         if (isXscan)
         {
                int ret = TestMsgProcess(BCMsg,dBufCount);            // 把收到的数据交给处理函数处理
                if (ret == 2)
                {
                   m_bProcess  = false;                 // 处理数据结束
                   continue;
                }

                isXscan = false;
         }
         else
         {
                if (BCMsgProcess(BCMsg, dBufCount) == 2)
                {
                    m_bProcess  = false;                 // 处理数据结束
                    continue;
                }
         }

         dBufCount = 0;
         m_bAccept = false;                      // 数据处理完成标志
         m_bProcess= false;                      // 处理数据结束
         m_bBCScan = false;                      // 条码调试结束
         continue;
      }
      if(m_bReadID)                              // 读取ID
      {
         iDCount = 4096 + 4;
         if(dBufCount<iDCount)
         {
            m_bProcess  = false;                 // 处理数据结束
            continue;
         }
         memcpy(BCMsg,&RecvBuf,iDCount);
         IDMsgProcess(BCMsg,iDCount);            // 把收到的数据交给处理函数处理

         dBufCount = 0;
         m_bAccept = false;                      // 数据处理完成标志
         m_bProcess= false;                      // 处理数据结束
         m_bReadID = false;                      // ID读取结束
         continue;
      }
      if(m_bScan)                                // 强制扫描
      {

         memcpy(TestMsg,RecvBuf,dBufCount);
         int ret = TestMsgProcess(TestMsg,dBufCount);        // 把收到的数据交给处理函数处理
         if (ret == 2)
         {
             m_bProcess  = false;                 // 处理数据结束
             continue;
         }

         dBufCount = 0;
         m_bAccept = false;                      // 数据处理完成标志
         m_bProcess= false;                      // 处理数据结束
         m_bScan   = false;
         continue;
      }
      if(dBufCount<24)
      {
         dBufCount = 0;
         m_bProcess    = false;                  // 处理数据结束
         continue;                               // 动作指令是24字节一个包
      }
      memcpy(buf,&RecvBuf,24);
      b2  = buf[1];
      b4  = buf[3];
      b5  = buf[4];
      b8  = buf[7];                                //PH
      b9  = buf[8];                                //PL
      b10 = buf[9];
      b23 = CalcCRC(buf);                        // 数据校验

      if(b23!=buf[23])
      {
         dBufCount = 0;
         m_bProcess    = false;                  // 处理数据结束
         continue;
      }
                               // 处理的数据字节数
      if((buf[0] == 0 && b2 == 0x06) || (buf[0] == 1 && buf[1] == 0))
      {
            switch(b4)
            {
                case 0x07: sTemp = IntToHex(b8,2) +     // 读条码
                    IntToHex(b9,2) +
                    IntToHex(b10,2);
                    m_sBarCode = sTemp.SubString(1,5);
                    break;

                case 0x13: bHasCard = (b9==1) + (b10==1) * 2; break;   // 判断是否有卡

                case 0x0d: bHasID   = (b8==1); break;   // 检查是否有ID卡
                case 0x1e: b8 = buf[8];                 // 写ID卡
                    b9 = buf[9];
                    b10= buf[10];
                    bHasID   = (b8==0x00);              // 是否有ID卡
                    dwIDByte = b9 * 256 + b10;          // 写入/读取ID卡的字节数
                    break;
                case 0x1f: bHasID = (b9==0x00); break;  // 有ID卡

                case 0x12: iScan[20] = b9*256+b10; break;
                case 0x11: iScan[21] = b9*256+b10; break;
                case 0x15: iScan[22] = b9*256+b10; break;
                case 0x18: iScan[23] = b9*256+b10; break;

                case 0x16:                              // 读温度
                    iScan[26] = b9*256+b10;
                    if (b8) iScan[26] = -iScan[26];
                    break;

                case 0x02: // 测量头参数读写
                    Wv = b8 * 256 + b9;          // 结果值
                    switch(b5)
                    {
                        case 0x00:iScan[0]=Wv;break; // 电机频率
                        case 0x01:iScan[10]=Wv;break;// 电机丢卡频率
                        case 0x02:iScan[1]=Wv;break; // X原点-条码
                        case 0x03:iScan[2]=Wv;break; // 条码长度
                        case 0x04:iScan[6]=Wv;break; // X原点-测试
                        case 0x06:iScan[7]=Wv;
                            m_wDots = iScan[7];
                            SaveComParam();
                            break; // 测试窗口长度
                        case 0x07:iScan[3]=Wv;break; // 条码1 list
                        case 0x08:iScan[4]=Wv;break; // 条码距离
                        case 0x09:iScan[5]=Wv;break; // 条码放大倍数
                        case 0x0a:iScan[8]=Wv;break; // 条形连续
                        case 0x0b:iScan[9]=Wv;break; // 测试放大倍数
                        case 0x0c:iScan[27]=Wv;break;
                        case 0x0d:iScan[28]=Wv;break;
                        case 0x0e:iScan[11]=Wv;break;// 试剂卡颜色
                        case 0x0f:iScan[12]=Wv;break;// 电机是否锁步
                        case 0x10:iScan[13]=Wv;break;// 电机加速步数
                        case 0x11:iScan[14]=Wv;break;// 电机加速频率
                        case 0x12:iScan[15]=Wv;break;// 低速频率
                        case 0x13:iScan[16]=Wv;break;// 低速次数
                        case 0x1d:m_BCompanyCode = buf[7];
                            m_WDevYear     = buf[8]*256+buf[9];
                            m_BDevMonth    = buf[10];
                            m_BDevDay      = buf[11];
                            m_BDevVer1     = buf[12];
                            m_BDevVer2     = buf[13];
                            m_BDevVer3     = buf[14];
                            ::Sleep(20);
                            break;
                        case 0x1e:m_WDevSYear = buf[7]*256+buf[8];//仪器编号年
                            m_WDevSNo   = buf[9]*256+buf[10];  //流水号
                            ::Sleep(20);
                            break;
                        case 0x1f:BI = buf[5]-1;
                            if(BI<7) for(int i=7; i<17; i++)
                                m_BCName[BI][i-7] = buf[i];
                            ::Sleep(20);
                            break;
                        case 0x2f:
                            if (buf[2])
                            {
                                iScan[24] = buf[10];
                                iScan[25] = buf[8];
                            }
                            break;
                    }
                break;
            }
      }

      dBufCount -= 24;
      if (dBufCount > 0)
      {
         memmove(RecvBuf, RecvBuf + 24, dBufCount);
      }
      m_bAccept = false;                         // 数据处理完成标志
      m_bProcess= false;                         // 处理数据结束
   }
   _endthread();
}

void __fastcall TfrmUart::FormCreate(TObject *Sender)
{
   dBufCount = 0;
   if(NULL==DataHandle)
      DataHandle=(HANDLE)_beginthread(DataThread,0,NULL);
   for(int i=0; i<30; i++) iScan[i] = 0;
}
//------------------------------------------------------------------------------
// 查询串口是否存在   并打开串口
//------------------------------------------------------------------------------
static bool ComPortExists(const AnsiString &asName)
{
   HANDLE hPort;
   bool   b = false;
   DWORD dwError;
   //com10 以上的端口号在win下要做特殊处理 。
   //串口名改为："\\.\COM10"
//   int comNum = asName.SubString(3,2).ToInt();
   hPort = CreateFile(asName.c_str(),
                      GENERIC_READ | GENERIC_WRITE,
                        0,
                        0,
                        OPEN_EXISTING,
                        0,
                        0);
   if (hPort!=INVALID_HANDLE_VALUE)           // 串口可被打开
   {
      CloseHandle(hPort);                     // 关闭串口
      b = true;
   }

   return b;
}
void __fastcall TfrmUart::OpenDevice(void)
{

   // if (XComm1->Opened)
  //  {
  //      CloseDevice();
  //  }
    if (!ComPortExists(m_sDevCom))
    {
        return;
    }


   XComm1->DeviceName = m_sDevCom;
   XComm1->BaudRate   = br57600;
   try
   {
      if(!XComm1->Opened) XComm1->OpenDevice();
   }
   catch ( ... )
   {

   }
   m_bConnected = XComm1->Opened;
   if(m_bConnected)
   {
      SendCommand(671,0,500);
      ::Sleep(300);
   }
}

void __fastcall TfrmUart::CloseDevice(void)
{
   m_bConnected = false;
   if (XComm1->Opened)
   {
        XComm1->CloseDevice();
   }
}

// 设备初始化函数
void __fastcall TfrmUart::InitDevice()
{
   if(!SendCommand( 1,0,0)) return;              // 测量头复位
   if(!SendCommand( 2,0,0)) return;              // 测量头到待机位
   if(!SendCommand( 1,0,0)) return;              // 测量头复位
}

// 清除命令发送缓冲区
void __fastcall TfrmUart::ClearSend(void)
{
    memset(ucSend, 0, sizeof (ucSend[0]) * 24);
}

// 计算命令的校验
void __fastcall TfrmUart::SendCRC(void)
{
   ucSend[23] = 0;
   for(int i = 0; i < 23; i++)
   {
        ucSend[23] += ucSend[i];
   }
}

// 生成指令函数
void __fastcall TfrmUart::CreateOrder(BYTE b4,BYTE b5,BYTE b6,BYTE b10)
{
   ClearSend();
   ucSend[0] = 1;
   ucSend[3] = b4;
   ucSend[4] = b5;
   ucSend[5] = b6;
   ucSend[9] = b10;     //统一成第九位
   if(b4 == 0x10)
   {
        ucSend[9] = 0;
        ucSend[7] = b10;
   }
   SendCRC();
}

/////////////////////////////////////////////////////////////////////////////
// 扫描头指令
void __fastcall TfrmUart::ScanCmd(BYTE b3,BYTE b5,BYTE b8,BYTE b9, BYTE b4)
{
   ClearSend();
   ucSend[0]  = 0x01;
   ucSend[2]  = b3;
   ucSend[3]  = b4;
   ucSend[4]  = b5;
   ucSend[7]  = b8;
   ucSend[8]  = b9;
   ucSend[9]  = channelm;  //单通道是1 ，五联卡是0

   SendCRC();
}

bool __fastcall WaitProcessAccept(int iDelay)
{
   TDateTime AThen,ANow;
   __int64 ibt = 0;
   WORD wDelay = 10000;
   AThen = Now();
   if(iDelay>0) wDelay = iDelay;
   while(m_bAccept&&(ibt<wDelay))
   {
      ::Sleep(10);
      Application->ProcessMessages();
      ANow = Now();
      ibt = MilliSecondsBetween(ANow,AThen);
   }
   return (ibt<wDelay);
}

bool __fastcall TfrmUart::WriteID(BYTE bbuf[],int iblock)
{
   bool bRet;
   BYTE buf[4096];
   memcpy(buf,bbuf,iblock*1024);
   for(int i=0; i<iblock; i++)
   {
      ClearSend();
      ucSend[0] = 0x01;
      ucSend[3] = 0x1e;
      ucSend[7] = i+1;
      SendCRC();
      m_bAccept = true;
      ::Sleep(200);
      DisplayData(0,ucSend,24);
      XComm1->SendData(ucSend,24);
      ::Sleep(500);
      m_bAccept = true;
      DisplayData(0,&buf[i*1024],1024);
      XComm1->SendData(&buf[i*1024],1024);
      ::Sleep(500);
      bRet = WaitProcessAccept(2000);
      if(bRet) bRet = bHasID&&(dwIDByte==1024);  // 有卡且写入1024字节
      if(!bRet) break;
   }
   return bRet;
}

// 指令发送函数
bool __fastcall TfrmUart::SendCommand(int iIndex,int param,int iDelay)
{
   if(m_bQuit) return false;
   AnsiString asCmds[34]={
              "测量头复位",     "测量头待机位",       "测量头测量",
              "扫描条码",       "加卡待机位",         "加卡位",
              "装卡位",         "加卡挡板升起",       "加卡挡板降下",
              "丢卡",           "丢卡xxx",            "转盘转RS位",
              "槽有卡检测",     "废卡槽状态检测",     "读温度大值",
              "读温度小值",     "读温度",             "设温度大值",
              "设温度小值",     "读软件版本",         "读序列号",
              "读电机频率",     "写电机频率",         "读卡位步数",
              "写卡位步数",     "写序列号",           "夹卡开",
              "夹卡关",         "开风扇",             "关风扇",
              "读夹卡频率",     "写夹卡频率",         "读夹卡步数",
              "写夹卡步数"};                                              
   WORD Y,M,D;
   BYTE BH,BL,B;

   BH = (param>>8) & 0xff;
   BL = param & 0xff;

   switch(iIndex)
   {
   case   1: CreateOrder(1,0,0,channelm);    break; // 测量头测量
   case   3: CreateOrder(3,0,0,0);    break; // 测量头复位     卡槽伸出
   case   4: CreateOrder(4,0,0,0);    break; // 测量头待机位   丢卡
   case   5: CreateOrder(5,0,0,channelm);    break; // 测量头强制扫描


   case   6: CreateOrder(6,0,0,channelm);    break; // 条码调试
   case   7: CreateOrder(7,0,0,channelm);    break; // 测量头扫描条码
   case  19: CreateOrder(0x13,0,0,0); break; // 插槽槽是否有卡检测
   case  13: CreateOrder(0x0d,0,0,0); break; // 是否有ID卡
   case  29: ScanCmd(1,0x1d,0,0);         break; // 读软件版本号，不可写
   case  31: CreateOrder(0x1f,0,0,1); break; // 读4KID卡
   case 301: ScanCmd(1,0x1e,0,0);         break; // 读主控板序列号
   case 302: ScanCmd(0,0x1e,0,0);                // 写主控板序列号
             BH        = m_WDevSYear/256;        // 2015 0001
             BL        = m_WDevSYear%256;        //
             ucSend[7] = BH;
             ucSend[8] = BL;
             BH        = m_WDevSNo/256;
             BL        = m_WDevSNo%256;
             ucSend[9] = BH;
             ucSend[10]= BL;
             SendCRC();
             break;
   case 311: ScanCmd(1,0x1f,0,0);                // 读注册码数据包
             ucSend[5] = param+1;
             SendCRC();
             break;
   case 312: ScanCmd(0,0x1f,0,0);                // 写注册码数据包
             ucSend[5] = param+1;
             for(int i=0; i<10; i++)
             {
                B = m_BCName[param][i];
                ucSend[7+i] = B;
             }
             SendCRC();
             break;

                ucSend[7]=0;
                SendCRC();


   case 601: ScanCmd(1,0,0,0);      break;       // 读扫描头电机频率
   case 602: ScanCmd(0,0,BH,BL);    break;       // 写扫描头电机频率

   case 611: ScanCmd(1,2,0,0);      break;       // 读X原点-条码
   case 612: ScanCmd(0,2,BH,BL);    break;       // 写X原点-条码
   case 621: ScanCmd(1,3,0,0);      break;       // 读长度-条码
   case 622: ScanCmd(0,3,BH,BL);    break;       // 写长度-条码
   case 631: ScanCmd(1,7,0,0);      break;       // 读条码1 list
   case 632: ScanCmd(0,7,BH,BL);    break;       // 写条码1 list
   case 641: ScanCmd(1,8,0,0);      break;       // 读条码距离
   case 642: ScanCmd(0,8,BH,BL);    break;       // 写条码距离
   case 651: ScanCmd(1,9,0,0);      break;       // 读条码放大倍数
   case 652: ScanCmd(0,9,BH,BL);    break;       // 写条码放大倍数
   case 661: ScanCmd(1,4,0,0);      break;       // 读X原点-测试
   case 662: ScanCmd(0,4,BH,BL);    break;       // 写X原点-测试
   case 671: ScanCmd(1,6,0,0);      break;       // 读测试窗口长度
   case 672: ScanCmd(0,6,BH,BL);    break;       // 写测试窗口长度
   case 681: ScanCmd(1,0x0a,0,0);   break;       // 读条形连续
   case 682: ScanCmd(0,0x0a,BH,BL); break;       // 写条形连续
   case 691: ScanCmd(1,0x0b,0,0);   break;       // 读测试放大倍数
   case 692: ScanCmd(0,0x0b,BH,BL); break;       // 写测试放大倍数

   case 701: ScanCmd(1,1,0,0);   SendCRC();  break;       // 读丢卡频率
   case 702: ScanCmd(0,1,BH,BL);  SendCRC();  break;       // 写丢卡频率
   case 711: ScanCmd(1,0x0e,0,0);SendCRC();  break;       // 读试剂卡颜色
   case 712: ScanCmd(0,0x0e,BH,BL);SendCRC(); break;       // 写试剂卡颜色
   case 721: ScanCmd(1,0x0f,0,0); SendCRC();  break;       // 读电机锁步
   case 722: ScanCmd(0,0x0f,BH,BL);SendCRC(); break;       // 写电机锁步
   case 731: ScanCmd(1,0x10,0,0);  SendCRC(); break;       // 读电机加速步数
   case 732: ScanCmd(0,0x10,BH,BL);SendCRC(); break;       // 写电机加速步数
   case 741: ScanCmd(1,0x11,0,0);  SendCRC(); break;       // 读电机加速频率
   case 742: ScanCmd(0,0x11,BH,BL);SendCRC(); break;       // 写电机加速频率
   case 751: ScanCmd(1,0x12,0,0);  SendCRC(); break;       // 读电机低数频率
   case 752: ScanCmd(0,0x12,BH,BL);SendCRC(); break;       // 写电机低数频率
   case 761: ScanCmd(1,0x13,0,0);  SendCRC(); break;       // 读电机低数次数
   case 762: ScanCmd(0,0x13,BH,BL);SendCRC(); break;       // 写电机低数次数



   case 801: InitCmd_add(1, 0x12, (param>>16)&0xff, 0, 0);  break;       // 读光路步长
   case 802: InitCmd_add(0, 0x12, (param>>16)&0xff, BH,BL); break;        // 写光路步长

   case 811: InitCmd_add(1, 0x11, (param>>16)&0xff, 0, 0);  break;       // 读X轴电机匀速
   case 812: InitCmd_add(0, 0x11, (param>>16)&0xff, BH,BL); break;        // 写X轴电机匀速
   
   case 821: InitCmd_add(1, 0x15, 0, 0, 0);  break;                      // 读X扫码长度
   case 822: InitCmd_add(0, 0x15, 0, BH,BL); break;                       // 写X扫码长度

   case 831: InitCmd_add(1, 0x18, (param>>16)&0xff, 0, 0);  break;       // 读y扫码位置
   case 832: InitCmd_add(0, 0x18, (param>>16)&0xff,BH,BL); break;         // 写y扫码位置

   case 851: CreateOrder(0x10, 0, 0, (param>>16)&0xff); break;      // 走光路盒
   case 852: CreateOrder(0x19, 0, 0, 0); break;        // y轴到丢卡
   case 853: CreateOrder(0x14, 0, 0, 0); isXscan = true; break;    // X轴条码调试

   case 860:  // 读温度
        ScanCmd(1,0,0,0,0x16);
        ucSend[7] = 0;
        SendCRC();
        break;
   case 861:  // 读温控
       ClearSend();
       ucSend[0] = 1;
       ucSend[2] = 1;
       ucSend[3] = 2;
       ucSend[4] = 0x2f;
       SendCRC();
        break;
   case 862:  // 写温控
       ClearSend();
       ucSend[0] = 1;
       ucSend[3] = 2;
       ucSend[4] = 0x2f;
       ucSend[8] = iScan[25];
       ucSend[10] = iScan[24];
       SendCRC();
       break;

   case 871:
       InitCmd_add(1,2, 0,  0, 0);
       ucSend[4] = 0xc;
       SendCRC();
       break;
   case 872:
       InitCmd_add(0,2, 0, iScan[27]/256,  iScan[27]%256);
       ucSend[4] = 0xc;
       SendCRC();
       break;

    case 873:
       InitCmd_add(1,2, 0,  0, 0);
       ucSend[4] = 0xd;
       SendCRC();
       break;
    case 874:
       InitCmd_add(0, 2, 0, iScan[28]/256,  iScan[28]%256);
       ucSend[4] = 0xd;
       SendCRC();
       break;

   }


   DisplayData(0,ucSend,24);


   m_bBCScan = (iIndex==6) || (iIndex==853);                      // 条码调试
   m_bScan   = (iIndex==5 || iIndex==1);                          // 强制读数

      m_bAccept = true;
      if(iIndex==5 || iIndex==1) ::Sleep(100);

      dBufCount = 0;
      XComm1->SendData(ucSend,24);
      if(iIndex==5 || iIndex==1) ::Sleep(100);
      bool bRet = WaitProcessAccept(iDelay + 500);

      if((iIndex==0x1f)&&bRet)
      {
         m_bReadID = true;
         m_bAccept = true;
         bRet = WaitProcessAccept(iDelay);
         m_bReadID = false;
      }


   return bRet;
}

bool LoadDevceParam(void)
{
   BYTE b;
   AnsiString s1;
   if(!frmUart->SendCommand(29,0,3000)) return false;   // 读软件版本号，不可写
   ::Sleep(300);
   if(!frmUart->SendCommand(301,0,3000)) return false;  // 读主控板序列号
   ::Sleep(300);
   if(!frmUart->SendCommand(311,0,3000)) return false;  //读公司名称3次
   ::Sleep(300);
   if(!frmUart->SendCommand(311,1,3000)) return false;
   ::Sleep(300);
   if(!frmUart->SendCommand(311,2,3000)) return false;
   m_sCompanyName = "";
   for(int i=0; i<3; i++)
   for(int j=0; j<10; j++)
   {
      b = m_BCName[i][j];
      if( (b!=0)&&(b!=255) )
      {
         s1 = " ";
         s1[1] = b;
         m_sCompanyName+=s1;
      }
   }
   return true;
}






/*********************************************************************************************************
** Function name:       Func_BARCODEBITcount(INT8U n,INT8U k)
** Descriptions:        条码值计算
** input parameters:    n :同类数据的个数 k:数据性质(=0 数据视为0；=1数据视为1)
** output parameters:   无
** Returned value:      无
*********************************************************************************************************/
void BarCode::Func_BARCODEBITcount(int n,
                          int k,
                          int BARCODE_BIT,
                          int BARCODE_BITERR,
                          unsigned int &BarCode)
{
    int a,b=0;
    if(k==1)
    {
        a=n/BARCODE_BIT;					//数据个数转换为条码位数
        b=n%BARCODE_BIT;
        if(b>BARCODE_BITERR)					//剩下步数>条码误差
        {
            a++;
        }
        for(;a>0;a--)
        {
            BarCode = (BarCode<<1)&0xfffffffe;	       //移入值
        }
    }
    else
    {
        a=n/BARCODE_BIT;					//数据个数转换为条码位数
        b=n%BARCODE_BIT;
        if(b>BARCODE_BITERR)					//剩下步数>条码误差
        {
            a++;
        }
        for(;a>0;a--)
        {
            BarCode = (BarCode<<1)|0x00000001;	       //移入值
        }
    }
}

/*********************************************************************************************************
** Function name:       Func_Barcode_COUNT()
** Descriptions:        条码数值计算
** input parameters:
** output parameters:   无
** Returned value:      无
*********************************************************************************************************/
void BarCode::Func_Barcode_COUNT(unsigned int &BarCode,
                        WORD ADC_Buffer[],
                        int BARCODE_BIT,        // 1 List
                        int BARCODE_BITERR,     // 条码连续
                        int BARCODE_LENGTH,     // 条码位数
                        int ADC_Pointer         // 全程长度
                        )
{
    int  i=0,j=0,k=0,l=0 ;
    int  n=0 ;
    BarCode=0 ;                                 //条码值清零
    for(;i + POINTOFFSET < ADC_Pointer;i++)					//寻找起始位置
    {
        if(ADC_Buffer[POINTOFFSET+i]<=60000)
        {
            break;
        }                                       //发现小于60000的数，结束
    }
    for(;i + POINTOFFSET < ADC_Pointer;i++)
    {
        if(ADC_Buffer[POINTOFFSET+i]>60000)				//找到大于58000的数,起始位置结束,开始计算条码
        {
            k=1;
            break;
        }
        j++;
        if(j>BARCODE_BIT+(BARCODE_BITERR/3))    //计数位置超过1位条码物理步数,起始位置结束,开始计算条码
        {
            k=0;
            break;
        }
    }
    n=0;
    l=0;
    for(;i + POINTOFFSET < ADC_Pointer;i++)					//计算条码值
    {
        if(l<(BARCODE_LENGTH-1))
        {
            if(k==0)
            {
                n++;
                if(ADC_Buffer[POINTOFFSET+i]>60000)
                {
                    n--;
                    Func_BARCODEBITcount(n, k, BARCODE_BIT, BARCODE_BITERR, BarCode);          //条码位计算
                    l=l+(n/BARCODE_BIT);                //计算本次测的位数
                    if((n%BARCODE_BIT)>BARCODE_BITERR)	//计算余数
                    {
                        l++;
                    }
                    k=1;
                    n=0;
                    i--;
                }
            }
            else
            {
                n++;
                if(ADC_Buffer[POINTOFFSET+i]<=60000)
                {
                    n--;
                    Func_BARCODEBITcount(n,k, BARCODE_BIT, BARCODE_BITERR, BarCode);          //条码位计算
                    l=l+(n/BARCODE_BIT);                //计算本次测的位数
                    if((n%BARCODE_BIT)>BARCODE_BITERR)	//计算余数
                    {
                        l++;
                    }
                    k=0;
                    n=0;
                    i--;
                }
            }
        }
    }
    i=l-(BARCODE_LENGTH-1);
    if(i!=0)
    {
        for(;i>0;i--)
        {
            BarCode = (BarCode>>1)&0x7fffffff;          //将多余的位数去掉
        }
    }
    i=0;
    j=(BARCODE_LENGTH-1)/8;
    if(((BARCODE_LENGTH-1)%8)!=0)
    {
        j++;
    }
    n=j*8-(BARCODE_LENGTH-1) ;
    for(;i<n;i++)
    {
        BarCode = (BarCode<<1)&0xfffffffe;				//3字节对齐
    }
}



